@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager navigator
@implements IAsyncDisposable

<PageTitle>Chat Hub by Nick</PageTitle>
<h2>Chatting Application</h2>

@if (!isConnected)
{
    <div class="input-group">
        <input @bind="username" class="" placeholder="Enter The name" style="width:200px">
        <button class="btn btn-primary form-control-appent" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    <textarea style="width: 100%; height: 500px">
        @messages
    </textarea>
    <div class="input-group">
        <input @bind-value="massage"
            @bind-value:event="oninput"
            @onkeyup="HandleInput"
            class="form-control">
        <button class="btn btn-primary form-control-appent" @onclick="Send">
            Send
        </button>

    </div>

}

@code{
    private HubConnection? hubConnection;
    private string messages = string.Empty;
    private string username = string.Empty;
    private string massage = string.Empty;

    // connect to serverside hub and send username to server-side hub
    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(navigator.ToAbsoluteUri($"/chathub?username={username}")).Build();

        hubConnection.On<string, string>("getMessage", (username, massage) =>
        {
            var msg = $"{(string.IsNullOrEmpty(username) ? "" : username + ": ")} {massage}";
            messages += msg + "\n";

        //render page again
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter")){
            await Send();
        }
}

    //send new message in chat
    private async Task Send()
    {
        if(hubConnection != null)
        {
            //out method name in parameter to send asyn 
            await hubConnection.SendAsync("SendNewMessege", username, massage);
            massage = string.Empty;
        }
    }

    public bool isConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if(isConnected != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}